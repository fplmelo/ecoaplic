---
title: "7-Mean Tests"
subtitle: " "
author: "Felipe Melo"
institute: "Nottingham Trent University - UK"
from: markdown+emoji
format:
  revealjs:
    theme: [default, custom.scss]
    incremental: false
    chalkboard: true
    logo: img/ntu_logo.png
    footer: "Research Methods & Data Analysis"
    slide-number: true
    transition: slide
    background-transition: fade
    #auto-stretch: true
    title-block-banner: true

---

```{r}
library(tidyverse)
library(palmerpenguins)
#install.packages("gmodels")
library(gmodels)
library(kableExtra)
library(gtable)
library(ggpubr)

```


## You should know today:

- Know when to use mean tests
- Understand means and variances
- Parametric nd non-parametric versions
- T-tests, ANOVA, etc...
- Paired tests


## Types of variables (review)

::::{.columns}
:::{.column .fragment}
**Categorical**

![](https://static-assets.codecademy.com/Courses/Hypothesis-Testing/Intro_to_variable_types_3.png)

:::

:::{.column .fragment}
**Numerical**

![](https://static-assets.codecademy.com/Courses/Hypothesis-Testing/Intro_to_variable_types_4.png)

:::
::::

## Back to the toolbox

![](img/toolkit.png){fig-align="center"}

## Basics

![](img/comparing-means.png){fig-align="center"}

## One-Sample

![](https://statstest.b-cdn.net/wp-content/uploads/2020/02/Single-Sample-T-Test-1-1024x512.png)

## Assumptions

- Continuous
- Normally Distributed
- Random Sample
- Enough Data

![](https://statstest.b-cdn.net/wp-content/uploads/2020/02/Screen-Shot-2020-02-06-at-5.23.39-PM.png){.absolute right=10 top=30 width=50%}

## Let's code it

:::{.panel-tabset}

## Penguins

![](https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png){width="40%" fig-align="left"}

![](https://allisonhorst.github.io/palmerpenguins/reference/figures/culmen_depth.png){.absolute width="40%" right=10 bottom=80}

## Code

```{r}
#| label: table
#| include: true
#| echo: true
set.seed(586)
x<-rnorm(50)
t.test(x, mu = 0, alternative = "two.sided")

```

## Example

```{r}
#| label: penguins
#| include: true
#| echo: true
penguins %>% 
  filter(species=="Adelie") %>% 
  select(bill_length_mm)->x

t.test(x, mu = 43.92, alternative = "two.sided")

```

## Graph

```{r}
#| include: true
#| echo: true
#| output-location: column
penguins %>% 
ggdensity(x = "bill_length_mm",
   add = "mean", rug = TRUE,
   color = "#00AFBB", fill = "#00AFBB")+
  geom_vline(xintercept = 38.79139)
```
:::

## One-sided differences
:::{.panel-tabset}
## Context

<a href="https://www.statista.com/statistics/1093256/novel-coronavirus-2019ncov-deaths-worldwide-by-country/" rel="nofollow"><img src="https://www.statista.com/graphic/1/1093256/novel-coronavirus-2019ncov-deaths-worldwide-by-country.jpg" alt="Statistic: Number of novel coronavirus (COVID-19) deaths worldwide as of May 2, 2023, by country and territory | Statista" style="width: 100%; height: auto !important; max-width:1000px;-ms-interpolation-mode: bicubic;"/></a><br />Find more statistics at  <a href="https://www.statista.com" rel="nofollow">Statista</a>

## Code

```{r}
#| include: true
#| echo: true
#| output-location: column

# Fetch the data from Our World in Data. RUN ONLY ONCE
url <- "https://covid.ourworldindata.org/data/owid-covid-data.csv"
df <- read_csv(url)

# Prepare the data
df_latest <- df %>%
  group_by(location) %>%
  slice_tail(n = 1) %>%
  mutate(deaths_per_million = total_deaths / population * 1000000)
df_latest %>% 
  filter(location=="Brazil") %>% 
  select(deaths_per_million)

```

## Plot

```{r}
#| include: true
#| echo: true
#| output-location: column

ggplot(df_latest, aes(x = deaths_per_million)) +
  geom_histogram(fill = "steelblue") +
  labs(title = "COVID-19 Deaths per Million") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  geom_vline(xintercept=3261)

```
## t-test

```{r}
#| include: true
#| echo: true
#| output-location: column

t.test(df_latest$deaths_per_million, 
       mu = 3261, 
       alternative = "less")


```

## Is it normal?
```{r}
#| include: true
#| echo: true
#| output-location: column

shapiro.test(df_latest$deaths_per_million) ## Non-normal!!

```

## Non-parametirc test

```{r}
#| include: true
#| echo: true
#| output-location: column

wilcox.test(df_latest$deaths_per_million,
            mu = 3261,
            alternative = "less")

```

:::

## Two independent groups
:::{.panel-tabset}
## Data
```{r}
#| include: true
#| echo: true
#| output-location: column

# Data in two numeric vectors
women_weight <- c(38.9, 61.2, 73.3, 21.8, 63.4, 64.6, 48.4, 48.8, 48.5)
men_weight <- c(67.8, 60, 63.4, 76, 89.4, 73.3, 67.3, 61.3, 62.4) 
# Create a data frame
my_data <- data.frame( 
                group = rep(c("Woman", "Man"), each = 9),
                weight = c(women_weight,  men_weight)
                )
my_data
```

## Plot

```{r}
#| include: true
#| echo: true
#| output-location: column
library("ggpubr")
ggboxplot(my_data, x = "group", y = "weight", 
          color = "group", palette = c("#00AFBB", "#E7B800"),
        ylab = "Weight", xlab = "Groups")
```
## Check assumptions

- Are the two samples independents?
- Are the data from each of the 2 groups follow a normal distribution?
- Do the two populations have the same variances?

:::

## Testing normal distribution

```{r}
#| include: true
#| echo: true
#| output-location: default

# Shapiro-Wilk normality test for Men's weights
with(my_data, shapiro.test(weight[group == "Man"]))# p = 0.1
# Shapiro-Wilk normality test for Women's weights
with(my_data, shapiro.test(weight[group == "Woman"])) # p = 0.6

```

## Testing equal variances

```{r}
#| include: true
#| echo: true
#| output-location: default
var.test(weight ~ group, data = my_data)
```

## Unpaired two-samples t-test

```{r}
#| include: true
#| echo: true
#| output-location: default
t.test(women_weight, men_weight, var.equal = TRUE) # method 1

t.test(weight ~ group, data = my_data, var.equal = TRUE) # Method 2
```

## Non-parametric test
::: {.panel-tabset}
## Wilcoxon
![](https://datatab.net/assets/tutorial/Wilcoxon-Test.png)

source:<https://datatab.net/tutorial/wilcoxon-test>

## Data
```{r}
#| include: true
#| echo: true
#| output-location: default
my_data %>% 
  mutate(subject = rep(1:9,2)) %>%
  pivot_wider(names_from = group, 
              values_from = weight) %>% 
  mutate(diff=Woman-Man) %>% 
  arrange(diff) %>% 
  mutate(signal=ifelse(diff>0, "pos", "neg")) %>% 
  mutate(rank=9:1)
```

## Calculaion

![](https://datatab.net/assets/tutorial/Calculate-Wilcoxon-test.png)

## Code

```{r}
#| include: true
#| echo: true
#| output-location: default
wilcox.test(weight ~ group, data = my_data,
                   exact = FALSE)
```
:::

## More than two independent groups
:::{.panel-tabset}
## ANOVA

```{r}
#| include: true
#| echo: true
#| output-location: default

anova(lm(bill_length_mm~species, data=penguins))
```
## Sum of Squares
$$SS=\sum_{i=0}^{n} (X_i - \bar{X})^2$$

See [this video](https://www.youtube.com/watch?v=8PEMXgayXBg) to understand the logic of an ANOVA

## Visualising

```{r}
penguins %>% 
  na.omit %>% 
  ggplot(aes(x= species, y=bill_length_mm, 
             group= species, 
             color=species, 
             fill=species))+
  geom_jitter()+
  geom_hline(yintercept = c(38.8, 48.8, 47.6, 43.92), color=c("red", "green", "blue","black"))

```

## Anova Table

```{r}
anova_table <- data.frame(
  `Source of Variation` = c("Between Groups", "Within Groups (Error)", "Total"),
  `Sum of Squares (SS)` = c(100, 200, 300),
  `Degrees of Freedom (df)` = c(2, 15, 17),
  `Mean Square (MS)` = c(50, 13.33, NA),
  `F-value` = c(4.5, NA, NA),
  `p-value` = c(0.05, NA, NA)
)

kable(anova_table, format = "html", align = "c", caption = "ANOVA Table")

```

:::

## Kruskal-Wallis (non-parametric)

```{r}
#| include: true
#| echo: true
#| output-location: default
kruskal.test(bill_length_mm~species, data=penguins)
```

```{r}
penguins %>% 
  na.omit %>% 
  ggplot(aes(x= species, y=bill_length_mm, 
             group= species, 
             color=species, 
             fill=species))+
  geom_jitter()
```


## Paired designs

![](img/paired.png){fig-align=center}

## Paired

## End of DA class{.center}














